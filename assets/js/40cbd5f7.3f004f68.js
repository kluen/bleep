"use strict";(self.webpackChunkbleep_site=self.webpackChunkbleep_site||[]).push([[978],{8514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>v,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=t(7462),i=(t(7294),t(3905)),a=t(814);const s={},o="Porting sbt plugins!",l={unversionedId:"porting-sbt-plugins",id:"porting-sbt-plugins",title:"Porting sbt plugins!",description:"There are many sbt plugins which are super useful, and we certainly don't want to lose them when using Bleep.",source:"@site/docs/porting-sbt-plugins.mdx",sourceDirName:".",slug:"/porting-sbt-plugins",permalink:"/docs/porting-sbt-plugins",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Build rewrites",permalink:"/docs/usage/build-rewrites"},next:{title:"Install Bleep",permalink:"/docs/installing"}},p={},u=[{value:"Example ported plugin: DynVerPlugin",id:"example-ported-plugin-dynverplugin",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Scopes",id:"scopes",level:3},{value:"Global namespace",id:"global-namespace",level:3},{value:"Probably more",id:"probably-more",level:3},{value:"Distribution",id:"distribution",level:2}],d={toc:u};function v(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"porting-sbt-plugins"},"Porting sbt plugins!"),(0,i.kt)("p",null,"There are many sbt plugins which are super useful, and we certainly don't want to lose them when using Bleep."),(0,i.kt)("p",null,"The solution is to port them:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sbt plugins are ",(0,i.kt)("inlineCode",{parentName:"li"},"class"),"es"),(0,i.kt)("li",{parentName:"ul"},"sbt settings are ",(0,i.kt)("inlineCode",{parentName:"li"},"lazy val"),"s"),(0,i.kt)("li",{parentName:"ul"},"sbt tasks are ",(0,i.kt)("inlineCode",{parentName:"li"},"def"),"s"),(0,i.kt)("li",{parentName:"ul"},"input parameters are input parameters.")),(0,i.kt)("p",null,"Have a look in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/oyvindberg/bleep/tree/master/liberated"},"liberated")," folder in the github repo to see what it looks like, compared to sbt it is incredibly much easier to follow."),(0,i.kt)("h2",{id:"example-ported-plugin-dynverplugin"},"Example ported plugin: DynVerPlugin"),(0,i.kt)("p",null,"Look at how easy it is to follow!"),(0,i.kt)(a.Z,{language:"scala",mdxType:"CodeBlock"},'package bleep.plugin.dynver\n\nimport java.io.File\nimport java.util.Date\n\nclass DynVerPlugin(\n    val baseDirectory: File,\n    /* The prefix to use when matching the version tag */\n    val dynverTagPrefix: Option[String] = None,\n    /* The separator to use between tag and distance, and the hash and dirty timestamp */\n    val dynverSeparator: String = DynVer.separator,\n    /* The current date, for dynver purposes */\n    val dynverCurrentDate: Date = new Date,\n    /* Whether to append -SNAPSHOT to snapshot versions */\n    val dynverSonatypeSnapshots: Boolean = false\n) {\n\n  lazy val tagPrefix = {\n    val vTagPrefix = dynverVTagPrefix\n    val tagPrefix = dynverTagPrefix.getOrElse(if (vTagPrefix) "v" else "")\n    assert(vTagPrefix ^ tagPrefix != "v", s"Incoherence: dynverTagPrefix=$tagPrefix vs dynverVTagPrefix=$vTagPrefix")\n    tagPrefix\n  }\n\n  /* The dynver instance for this build */\n  lazy val dynverInstance: DynVer =\n    DynVer(Some(baseDirectory), dynverSeparator, tagPrefix)\n\n  /* Whether or not tags have a \'v\' prefix */\n  lazy val dynverVTagPrefix: Boolean =\n    dynverTagPrefix.getOrElse(DynVer.tagPrefix) == "v"\n\n  /* The output from git describe */\n  lazy val dynverGitDescribeOutput: Option[GitDescribeOutput] =\n    dynverInstance.getGitDescribeOutput(dynverCurrentDate)\n\n  /* The last stable tag */\n  lazy val dynverGitPreviousStableVersion: Option[GitDescribeOutput] =\n    dynverInstance.getGitPreviousStableTag\n\n  lazy val isSnapshot: Boolean =\n    dynverGitDescribeOutput.isSnapshot\n\n  /* The version string identifies a specific point in version control, so artifacts built from this version can be safely cached */\n  lazy val isVersionStable: Boolean =\n    dynverGitDescribeOutput.isVersionStable\n  /* The last stable version as seen from the current commit (does not include the current commit\'s version/tag) */\n  lazy val previousStableVersion: Option[String] =\n    dynverGitPreviousStableVersion.previousVersion\n\n  def getVersion(date: Date, out: Option[GitDescribeOutput]): String =\n    out.getVersion(date, dynverSeparator, dynverSonatypeSnapshots)\n\n  // The version of your project, from git\n  lazy val dynver: String =\n    getVersion(new Date, dynverInstance.getGitDescribeOutput(new Date))\n\n  lazy val version: String =\n    getVersion(dynverCurrentDate, dynverGitDescribeOutput)\n\n  // Asserts if the version derives from git tags\n  def dynverAssertTagVersion(): Unit =\n    dynverGitDescribeOutput.assertTagVersion(version)\n\n  // Checks if version and dynver match\n  def dynverCheckVersion: Boolean =\n    dynver == version\n\n  // Asserts if version and dynver match\n  def dynverAssertVersion(): Unit = {\n    val v = version\n    val dv = dynver\n    if (!dynverCheckVersion)\n      sys.error(s"Version and dynver mismatch - version: $v, dynver: $dv")\n  }\n}\n'),(0,i.kt)("h2",{id:"limitations"},"Limitations"),(0,i.kt)("h3",{id:"scopes"},"Scopes"),(0,i.kt)("p",null,"Bleep do not have scopes, instead for instance the test scope is represented as normal projects.\nIf you're porting an sbt plugin which makes heavy use of scopes, some more refactoring may be needed."),(0,i.kt)("h3",{id:"global-namespace"},"Global namespace"),(0,i.kt)("p",null,"Some sbt plugins mutate the global state, and this is how values are passed between plugins and sbt.\nIn Bleep these values must be passed as parameters"),(0,i.kt)("h3",{id:"probably-more"},"Probably more"),(0,i.kt)("p",null,"..."),(0,i.kt)("h2",{id:"distribution"},"Distribution"),(0,i.kt)("p",null,"After porting, these plugins can be (cross-) published to maven central just like any other library."))}v.isMDXComponent=!0}}]);